import asyncio
from datetime import datetime
import logging
from typing import Any, Dict
from aiogram import Router, types
from aiogram.exceptions import TelegramEntityTooLarge, TelegramNetworkError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dateutil import parser
from bot.globals import database
import bot.db.constants as constants
from urllib.parse import urlencode

from bot.handlers.start_entry import back_to_start


search_router = Router()

search_end_keybord = types.InlineKeyboardMarkup(
    inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò—Å–∫–∞—Ç—å –µ—â–µ", callback_data="search_more")],
        [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="go_back")]
    ]
)


class SearchForm(StatesGroup):
    main_menu = State()
    date_start_question = State()
    date_end_question = State()
    region_qestion = State()
    area_question = State()
    name_question = State()

async def update_markup(data: Dict[str, Any]):
    if not 'answer_message' in data:
        return
    answer_message = data['answer_message']

    date_start_button = types.InlineKeyboardButton(text=f"{'‚úÖ' if 'date_start' in data else '‚ùå'}–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {data.get('date_start').date() if 'date_start' in data else '–õ—é–±–∞—è'}", callback_data="filter_date_start")
    date_end_button = types.InlineKeyboardButton(text=f"{'‚úÖ' if 'date_end' in data else '‚ùå'}–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {data.get('date_end').date() if 'date_end' in data else '–õ—é–±–∞—è'}", callback_data="filter_date_end")
    region_button = types.InlineKeyboardButton(text=f"{'‚úÖ' if 'region' in data else '‚ùå'}–†–µ–≥–∏–æ–Ω: {data.get('region', '–õ—é–±–æ–π')}", callback_data="filter_region")
    area_button = types.InlineKeyboardButton(text=f"{'‚úÖ' if 'area_km' in data else '‚ùå'}–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {data.get('area_km', '–õ—é–±–æ–µ')}", callback_data="filter_area")
    name_button = types.InlineKeyboardButton(text=f"{'‚úÖ' if 'name' in data else '‚ùå'}–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {data.get('name', '–õ—é–±–æ–µ')}", callback_data="filter_name")

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [name_button],
        [date_start_button, date_end_button],
        [region_button, area_button],
        [types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="do_search")],
        [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="go_back")]
    ])


    await answer_message.edit_reply_markup(reply_markup=markup)


async def start_search_session(message: types.Message, state: FSMContext):
    logging.debug(f"starting search session for user with id {message.from_user.id}")
    await state.clear()

    answer = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    data = await state.update_data(answer_message=answer)
    await update_markup(data)
    await state.set_state(SearchForm.main_menu)


@search_router.callback_query(lambda c: c.data == 'filter_date_start')
async def filter_date_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    await state.set_state(SearchForm.date_start_question)


@search_router.message(SearchForm.date_start_question)
async def process_date_start(message: types.Message, state: FSMContext):
    try:
        date_start = parser.parse(message.text)
    except ValueError:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD."
        )
        return
    data = await state.update_data(date_start=date_start)
    await update_markup(data)
    await state.set_state(SearchForm.main_menu)


@search_router.callback_query(lambda c: c.data == 'filter_date_end')
async def filter_date_end(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    await state.set_state(SearchForm.date_end_question)


@search_router.message(SearchForm.date_end_question)
async def process_date_end(message: types.Message, state: FSMContext):
    try:
        date_end = parser.parse(message.text)
    except ValueError:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD."
        )
        return
    data = await state.update_data(date_end=date_end)
    await update_markup(data)
    await state.set_state(SearchForm.main_menu)


@search_router.callback_query(lambda c: c.data == 'filter_region')
async def filter_region(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–≥–∏–æ–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    await state.set_state(SearchForm.region_qestion)

@search_router.message(SearchForm.region_qestion)
async def process_region(message: types.Message, state: FSMContext):
    data = await state.update_data(region=message.text)
    await update_markup(data)
    await state.set_state(SearchForm.main_menu)


@search_router.callback_query(lambda c: c.data == 'filter_area')
async def filter_area(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö.")
    await state.set_state(SearchForm.area_question)

@search_router.message(SearchForm.area_question)
async def process_area(message: types.Message, state: FSMContext):
    try:
        area_km = float(message.text)
    except ValueError:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ.")
        return
    data = await state.update_data(area_km=area_km)
    await update_markup(data)
    await state.set_state(SearchForm.main_menu)

@search_router.callback_query(lambda c: c.data == 'filter_name')
async def filter_name(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    await state.set_state(SearchForm.name_question)

@search_router.message(SearchForm.name_question)
async def process_name(message: types.Message, state: FSMContext):
    data = await state.update_data(name=message.text)
    await update_markup(data)
    await state.set_state(SearchForm.main_menu)


@search_router.callback_query(lambda c: c.data == 'do_search')
async def do_search(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    data = await state.get_data()
    found_posts = await handle_search(callback_query.message, **data)
    if found_posts:
        await state.clear()
    else:
        await start_search_session(callback_query.message, state)


async def handle_search(
    message: types.Message, **kwargs
) -> bool:
    params = {}
    for key in ['name', 'date_start', 'date_end', 'region', 'area_km']:
        if key in kwargs:
            params[key] = kwargs.get(key)
    logging.debug(f'params={params}')
    search_info = constants.SearchInfo(**params)
    logging.debug(f'search_info={search_info}')
    posts = database.search_posts(search_info)
    logging.debug(f'posts={posts}')
    if not posts:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ."
        )
        return False

    MAX_POSTS = 4
    posts = posts[:MAX_POSTS]
    for post in posts:
        text = (
            f"üå¥ –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {post.info.name}\n"
            f"üìÜ –î–∞—Ç–∞: {post.info.date}\n"
            f"üìç –ú–µ—Å—Ç–æ: {post.info.region}\n"
            f"‚úâÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: {post.info.contacts}\n"
        )

        button = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"book_event_{post.id}")
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[button]])

        should_send_text = True
        if post.info.photos:
            should_send_text = False
            media = [
                types.InputMediaPhoto(media=types.URLInputFile(image_url))
                for image_url in post.info.photos
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            media[0].caption = text
            media[0].parse_mode = "HTML"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞ —Å –∫–Ω–æ–ø–∫–æ–π
            try:
                await message.answer_media_group(media)
                await message.answer("", reply_markup=keyboard)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
            except (TelegramNetworkError, TelegramEntityTooLarge) as e:
                logging.error(f"Error during uploading photos: {e.message}")
                should_send_text = True

        if should_send_text:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç –∏–ª–∏ –ø—Ä–∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
            await message.answer(text, reply_markup=keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=search_end_keybord)
    return True


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò—Å–∫–∞—Ç—å –µ—â–µ"
@search_router.callback_query(lambda c: c.data and c.data == "search_more")
async def process_search_more(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup(),  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.answer("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫...")
    await start_search_session(callback.message, state)


@search_router.callback_query(lambda c: c.data and c.data.startswith('book_event_'))
async def handle_booking(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    post_id = int(callback_query.data.split('_')[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–∞ –∏–∑ callback_data

    success = database.book_event(user_id, post_id)
    if success:
        await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
    else:
        await callback_query.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")


@search_router.callback_query(lambda c: c.data == 'go_back')
async def go_back(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()
    await back_to_start(callback.message, state)
    await callback.answer()
