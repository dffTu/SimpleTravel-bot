import asyncio
from datetime import datetime
import logging
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dateutil import parser
from bot.create_bot import database
from bot.db.constants import SearchInfo
from urllib.parse import urlencode


search_router = Router()

search_end_keybord = types.InlineKeyboardMarkup(
    inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò—Å–∫–∞—Ç—å –µ—â–µ", callback_data="search_more")]
    ]
)


class SearchForm(StatesGroup):
    date_question = State()
    region_qestion = State()


async def start_search_session(message: types.Message, state: FSMContext):
    await asyncio.sleep(0.4)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    logging.info(f"Set date_question state for user with id {message.from_user.id}")
    await state.set_state(SearchForm.date_question)


@search_router.message(SearchForm.date_question)
async def process_date(message: types.Message, state: FSMContext):
    date: datetime
    try:
        date = parser.parse(message.text)
    except ValueError:
        message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD."
        )
        return
    await state.update_data(date=date)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–≥–∏–æ–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    await state.set_state(SearchForm.region_qestion)


@search_router.message(SearchForm.region_qestion)
async def process_region(message: types.Message, state: FSMContext):
    region = message.text
    await state.update_data(region=region)

    data = await state.get_data()
    found_posts = await do_search(message, state, **data)
    if found_posts:
        await state.clear()
    else:
        await start_search_session(message, state)


async def do_search(
    message: types.Message, state: FSMContext, date: datetime, region: str
) -> bool:
    search_info = SearchInfo(date.strftime("%d.%m.%Y"), region)
    logging.debug(search_info)
    posts = database.get_posts(SearchInfo(date.strftime("%d.%m.%Y"), region))
    logging.debug(f"posts={posts}")
    if not posts:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ."
        )
        return False

    # TODO: support multiple posts
    post = posts[0]
    text = (
        f"üå¥ –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {post.name}\n"
        f"üìÜ –î–∞—Ç–∞: {post.date}\n"
        f"üìç –ú–µ—Å—Ç–æ: {post.region}\n"
        f"‚úâÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: {post.contacts}\n"
    )

    if post.photos:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ InputMediaPhoto
        # TODO: —Å–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        media = [
            types.InputMediaPhoto(
                media=types.URLInputFile(
                    "https://upload.wikimedia.org/wikipedia/commons/d/dd/Atlantis_Kircher_Mundus_subterraneus_1678.jpg"
                )
            ),
        ]
        # media = [types.InputMediaPhoto(media=types.URLInputFile(image_url)) for image_url in post.photos]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        media[0].caption = text
        media[0].parse_mode = "HTML"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞
        await message.answer_media_group(media)
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await message.answer(text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=search_end_keybord)
    return True


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò—Å–∫–∞—Ç—å –µ—â–µ"
@search_router.callback_query(lambda c: c.data and c.data == "search_more")
async def process_search_more(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup(),  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.answer("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫...")
    await start_search_session(callback.message, state)
