import asyncio
from datetime import datetime
import logging
from aiogram import Router, types
from aiogram.exceptions import TelegramEntityTooLarge, TelegramNetworkError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dateutil import parser
from bot.globals import database
import bot.db.constants as constants
from urllib.parse import urlencode


search_router = Router()

search_end_keybord = types.InlineKeyboardMarkup(
    inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò—Å–∫–∞—Ç—å –µ—â–µ", callback_data="search_more")]
    ]
)


class SearchForm(StatesGroup):
    date_question = State()
    region_qestion = State()


async def start_search_session(message: types.Message, state: FSMContext):
    logging.debug(f"starting search session for user with id {message.from_user.id}")
    await asyncio.sleep(0.4)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    await state.set_state(SearchForm.date_question)


@search_router.message(SearchForm.date_question)
async def process_date(message: types.Message, state: FSMContext):
    date: datetime
    try:
        date = parser.parse(message.text)
    except ValueError:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD."
        )
        return
    await state.update_data(date=date)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–≥–∏–æ–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    await state.set_state(SearchForm.region_qestion)


@search_router.message(SearchForm.region_qestion)
async def process_region(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data["region"] = message.text

    found_posts = await do_search(message, state, **data)
    if found_posts:
        await state.clear()
    else:
        await start_search_session(message, state)


async def do_search(
    message: types.Message, state: FSMContext, date: datetime, region: str
) -> bool:
    search_info = constants.SearchInfo(date, region)
    logging.debug(search_info)
    posts = database.get_posts(search_info)
    logging.debug(f"posts={posts}")
    if not posts:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ."
        )
        return False

    MAX_POSTS = 4
    posts = posts[:MAX_POSTS]
    for post in posts:
        text = (
            f"üå¥ –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {post.info.name}\n"
            f"üìÜ –î–∞—Ç–∞: {post.info.date}\n"
            f"üìç –ú–µ—Å—Ç–æ: {post.info.region}\n"
            f"‚úâÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: {post.info.contacts}\n"
        )

        should_send_text = True
        if post.info.photos:
            should_send_text = False
            media = [
                types.InputMediaPhoto(media=types.URLInputFile(image_url))
                for image_url in post.info.photos
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            media[0].caption = text
            media[0].parse_mode = "HTML"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞
            try:
                await message.answer_media_group(media)
            except (TelegramNetworkError, TelegramEntityTooLarge) as e:
                logging.error(f"Error during uploading photos: {e.message}")
                should_send_text = True

        if should_send_text:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç –∏–ª–∏ –ø—Ä–∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await message.answer(text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=search_end_keybord)
    return True


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò—Å–∫–∞—Ç—å –µ—â–µ"
@search_router.callback_query(lambda c: c.data and c.data == "search_more")
async def process_search_more(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup(),  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.answer("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫...")
    await start_search_session(callback.message, state)
